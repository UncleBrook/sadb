#!/usr/bin/env bash

c_green=$(tput setaf 2)
c_error=$(tput setaf 1)
c_reset=$(tput sgr0)
adb=$(which adb)
config="${HOME}/.config/sadb/"
mkdir -p "$config"

declare -A dic_device
declare -A alias
nums=()

active_device_num=-1

[[ ! -e "${config}.alias" ]] && touch "${config}.alias"

read_alias() {
    while IFS= read -r line; do
        if [[ ! "$line" =~ ^\s*# ]] && [[ -n "$line" ]]; then
            key="${line%%=*}"
            value="${line#*=}"
            alias["$key"]="$value"
        fi
    done < "${config}.alias"
}

add_alias() {
    local key prompt
    key=$(echo "$1" | cut -d ' ' -f 1 | cut -d '.' -f 2)
    if [[ -v alias["$key"] ]]; then
        prompt="The original alias is ${c_error}'$key=${alias[$key]}'${c_reset}, would you like to overwrite it ${c_green}[y/n]${c_reset}:"
        printf '%s' "$prompt"
        read -r answer
        case $answer in
            [Yy]* ) 
                local temp="$key=${*:2}"
                remove_alias "$key"
                echo "$temp" >> "${config}.alias"
                ;;
            [Nn]* ) 
                exit 0
                ;;
            * ) 
                exit 0
                ;;
        esac
    else
        echo "$key=${*:2}" >> "${config}.alias"
    fi
    read_alias
}

remove_alias() {
    if [[ -v alias["$1"] ]]; then
        sed -i "/^[[:space:]]*$1=/d" "${config}.alias"
        read_alias
    else
        printf "The alias does not contain the \"%s\"\n\n" "$1"
        printf "List of alias:\n"
        print_alias
    fi
}

show_alias() {
    if [[ -v alias["$1"] ]]; then
        printf "%s=%s\n" "$1" "${alias[$1]}"
    fi
}

print_alias() {
    for key in "${!alias[@]}"; do
        printf "alias.%s=%s\n" "$key" "${alias[$key]}"
    done
}


exec_adb() {
    local num device args
    num=$(($1 + 2))
    device=$(sed -n "${num}p" <<< "$devices")
    IFS=" " read -ra args <<< "${device//\// }"

    alias_args="${alias[${adb_args[0]}]}"

    if [[ -z "$alias_args" ]]; then

        printf "\n${c_green}%s ${c_reset}-s %s %s \n\n" "${adb}" "${args[0]}" "${adb_args[*]}">&2
        "${adb}" -s "${args[0]}" "${adb_args[@]}"
    else

        printf "\n${c_green}%s ${c_reset}-s %s %s %s \n\n" "${adb}" "${args[0]}" "${alias_args}" "${adb_args[*]:1}">&2
        "${adb}" -s "${args[0]}" ${alias_args} "${adb_args[@]:1}"
    fi

    printf "\n" >&2
}

choose_device() {
    if [ $active_device_num -ne -1 ]; then
        exec_adb "$active_device_num"
        exit 0
    fi

    local total_line input
    total_line=$(( device_count - 2 ))

    printf "\n" >&2
    local tips="More than one device/emulator, please select ${c_green}[0 .. ${total_line}]${c_reset} or ${c_green}[a/A]${c_reset}: "

    while :; do
        printf '%s' "$tips"
        read -r input

        if [[ " ${nums[*]} " == *" ${input} "* ]]; then
            if [[ "$input" == [aA] ]]; then
                for s in "${nums[@]}"; do
                    [[ "$s" =~ [0-9]+ ]] && exec_adb "$s"
                done
            else
                exec_adb "$input"
            fi
            break
        fi
    done
}

print_devices() {
    devices=$("${adb}" devices -l)
    device_count=$(wc -l <<< "$devices")

    if [ "$device_count" -eq 1 ]; then
        printf "No devices attached \n\n"
        exit 0
    elif [ "$device_count" -eq 2 ]; then
        exec_adb
        exit 0
    else
        local active=$(echo $ACTIVE_DEVICE)
        local details=("" "$(echo "$devices" | head -n 1)")
        
        for line in $(seq 2 "$device_count"); do
            num=$(( line - 2 ))
            nums[$num]=$num

            parse_device "$(sed -n "${line}p" <<< "$devices")"

            if [ "$active" = "${dic_device[sn]}" ]; then
                active_device_num=$num
                break
            else
                device=$(printf "${c_green}[ %d ]${c_reset} sn: %-20s ${c_reset}%-16s model: %-20s product: %-20s\n" \
                "$num" "${dic_device[sn]}" "${dic_device[device_type]}" "${dic_device[model]}" "${dic_device[product]}")
                details+=("$device")
            fi
        done

        if [ $active_device_num -eq -1 ]; then
            for line in "${details[@]}"; do
                printf "$line\n"
            done
        fi

        nums[${#nums[@]}]=a
        nums[${#nums[@]}]=A
    fi
}

parse_device() {
    local device key value
    IFS=" " read -ra device <<< "${1//\// }"
    unset 'dic_device[sn]'
    unset 'dic_device[device_type]'
    unset 'dic_device[model]'
    unset 'dic_device[product]'
    for ((i = 0; i < ${#device[@]}; i++)); do
        IFS=':' read -r key value <<< "${device[i]}"
        [[ $i -eq 0 ]] && { value="$key"; key="sn"; }
        [[ $i -eq 1 ]] && { value="$key"; key="device_type"; }
        dic_device["$key"]="$value"
    done
}

print_exec_time() {
    _date=$(date "+%Y-%m-%d %A %H:%M:%S")
    printf "[ %s ]\n" "$_date">&2
}

set_active_device() {
    printf "%s\n${c_green}%s\n" "Please copy and execute the following command:" "export ACTIVE_DEVICE=$1"
}

unset_active_device() {
    printf "%s\n${c_green}%s\n" "Please copy and execute the following command:" "unset ACTIVE_DEVICE"
}

print_help() {
cat << EOF
Usage: 
    ${0##*/} alias [<options>]
    ${0##*/} alias.<options> [<options>]

Options:
    -h, --help          Print help information and exit.
    -l, --list          Print alias and exit.
    -r, --remove        Delete alias and exit.
    alias.[alias]       Set the alias and exit.
    active              Set the current active device and exit.
    active -d           Clear the environment variables and exit.
    [alias]             Print the alias named "alias" and exit.

Example:
    ${0##*/} alias -r value

EOF
}

main() {
    adb_args=("$@")
    case "$1" in
        -s|-p|-e|-d|start-server|kill-server|disconnect|connect|help|keygen|version)
            "${adb}" "${adb_args[@]}"
            ;;
        devices)
            if [[ $# -eq 1 ]]; then
                adb "${adb_args[@]}" -l
            else
                adb "${adb_args[@]}"
            fi
            ;;
        alias)
            case "$2" in
                -h|--help)
                    print_help
                    ;;
                -l|--list)
                    # grep --color -E '^[^=]*|$' "${config}.alias"
                    print_alias
                    ;;
                -r|--remove)
                    if [[ -z "$3" ]]; then
                        print_help
                    else
                        remove_alias "$3"
                    fi
                    ;;
                "")
                    print_help
                    ;;
                *)
                    show_alias "$2"
                    ;;
            esac
            ;;
        alias.*)
            if [[ -z "$2" ]]; then
                print_help
            else
                add_alias "$@"
            fi
            ;;
        active)
            case "$2" in
                -d)
                    unset_active_device
                    ;;
                *)
                    set_active_device "$2"
                    ;;
            esac
            ;;
        *)
            print_devices
            choose_device
            ;;
    esac
}

print_exec_time
read_alias
main "$@"
